{"version":3,"file":"index.mjs","sources":["../src/lib/metadata.ts","../src/transforms/background.ts","../src/transforms/blur.ts","../src/transforms/fit.ts","../src/transforms/flatten.ts","../src/transforms/flip.ts","../src/transforms/flop.ts","../src/transforms/quality.ts","../src/transforms/progressive.ts","../src/transforms/format.ts","../src/transforms/grayscale.ts","../src/transforms/hsb.ts","../src/transforms/invert.ts","../src/transforms/kernel.ts","../src/transforms/median.ts","../src/transforms/normalize.ts","../src/transforms/position.ts","../src/transforms/resize.ts","../src/transforms/rotate.ts","../src/transforms/tint.ts","../src/builtins.ts","../src/output-formats.ts","../src/util.ts","../src/lib/parse-url.ts","../src/lib/resolve-configs.ts","../src/lib/logger.ts","../src/lib/generate-transforms.ts","../src/lib/apply-transforms.ts"],"sourcesContent":["import { Sharp } from 'sharp'\n\nexport const METADATA = Symbol('image metadata')\n\ndeclare module 'sharp' {\n  interface Sharp {\n    [METADATA]: Record<string, any>\n  }\n}\n\nexport function setMetadata(image: Sharp, key: string, value: any) {\n  image[METADATA] && (image[METADATA][key] = value)\n}\n\nexport function getMetadata(image: Sharp, key: string) {\n  return image[METADATA]?.[key]\n}\n","import { TransformOption } from '../types'\nimport { setMetadata } from '../lib/metadata'\n\nexport interface BackgroundOptions {\n  background: string\n}\n\nexport const getBackground: TransformOption<BackgroundOptions, string> = ({ background }, image) => {\n  if (typeof background !== 'string' || !background.length) return\n\n  setMetadata(image, 'background', background)\n\n  return background\n}\n","import { TransformFactory } from '../types'\nimport { setMetadata } from '../lib/metadata'\n\nexport interface BlurOptions {\n  blur: string\n}\n\nexport const blur: TransformFactory<BlurOptions> = (config) => {\n  let blur: number | boolean | undefined = undefined\n\n  blur = config.blur ? parseFloat(config.blur) : undefined\n  blur ||= config.blur === 'true'\n  blur ||= config.blur === ''\n\n  if (!blur) return\n\n  return function blurTransform(image) {\n    setMetadata(image, 'blur', blur)\n\n    return image.blur(blur)\n  }\n}\n","import { TransformOption } from '../types'\nimport { setMetadata } from '../lib/metadata'\n\nexport const fitValues = ['cover', 'contain', 'fill', 'inside', 'outside'] as const\n\nexport type FitValue = (typeof fitValues)[number]\n\nexport interface FitOptions {\n  fit: FitValue\n}\n\nexport const getFit: TransformOption<FitOptions, FitValue> = (config, image) => {\n  let fit: FitValue | undefined = undefined\n\n  if (config.fit && fitValues.includes(config.fit)) {\n    fit = config.fit\n  } else {\n    fit = Object.keys(config).find((k: any): k is FitValue => fitValues.includes(k) && config[k] === '')\n  }\n\n  if (!fit) return\n\n  setMetadata(image, 'fit', fit)\n\n  return fit\n}\n","import { TransformFactory } from '../types'\nimport { setMetadata } from '../lib/metadata'\nimport { getBackground } from './background'\n\nexport interface FlattenOptions {\n  flatten: '' | 'true'\n}\n\nexport const flatten: TransformFactory<FlattenOptions> = (config) => {\n  if (config.flatten !== '' && config.flatten !== 'true') return\n\n  return function flattenTransform(image) {\n    setMetadata(image, 'flatten', true)\n\n    return image.flatten({\n      background: getBackground(config, image)\n    })\n  }\n}\n","import { TransformFactory } from '../types'\nimport { setMetadata } from '../lib/metadata'\n\nexport interface FlipOptions {\n  flip: '' | 'true'\n}\n\nexport const flip: TransformFactory<FlipOptions> = ({ flip }) => {\n  if (flip !== '' && flip !== 'true') return\n\n  return function flipTransform(image) {\n    setMetadata(image, 'flip', true)\n\n    return image.flip()\n  }\n}\n","import { TransformFactory } from '../types'\nimport { setMetadata } from '../lib/metadata'\n\nexport interface FlopOptions {\n  flop: '' | 'true'\n}\n\nexport const flop: TransformFactory<FlopOptions> = ({ flop }) => {\n  if (flop !== '' && flop !== 'true') return\n\n  return function flopTransform(image) {\n    setMetadata(image, 'flop', true)\n\n    return image.flop()\n  }\n}\n","import { TransformOption } from '../types'\nimport { setMetadata } from '../lib/metadata'\n\nexport interface QualityOptions {\n  quality: string\n}\n\nexport const getQuality: TransformOption<QualityOptions, number> = ({ quality: _quality }, image) => {\n  const quality = _quality && parseInt(_quality)\n\n  if (!quality) return\n\n  setMetadata(image, 'quality', quality)\n\n  return quality\n}\n","import { TransformOption } from '../types'\nimport { setMetadata } from '../lib/metadata'\n\nexport interface ProgressiveOptions {\n  progressive: '' | 'true'\n}\n\nexport const getProgressive: TransformOption<ProgressiveOptions> = ({ progressive }, image) => {\n  if (progressive !== '' && progressive !== 'true') return\n\n  setMetadata(image, 'progressive', true)\n\n  return true\n}\n","import { TransformFactory } from '../types'\nimport { setMetadata } from '../lib/metadata'\nimport { getQuality } from './quality'\nimport { getProgressive } from './progressive'\nimport { FormatEnum } from 'sharp'\n\nexport const formatValues = ['avif', 'jpg', 'jpeg', 'png', 'heif', 'heic', 'webp', 'tiff'] as const\n\nexport type FormatValue = (typeof formatValues)[number]\n\nexport interface FormatOptions {\n  format: FormatValue\n}\n\nexport const format: TransformFactory<FormatOptions> = (config) => {\n  let format: FormatValue | undefined = undefined\n\n  if (config.format && formatValues.includes(config.format)) {\n    format = config.format\n  } else {\n    format = Object.keys(config).find((k: any): k is FormatValue => formatValues.includes(k) && config[k] === '')\n  }\n  if (!format) return\n\n  const fixedFormat: keyof FormatEnum = format as any\n\n  return function formatTransform(image) {\n    setMetadata(image, 'format', format)\n\n    return image.toFormat(fixedFormat, {\n      quality: getQuality(config, image),\n      progressive: getProgressive(config, image) as boolean\n    })\n  }\n}\n","import { TransformFactory } from '../types'\nimport { setMetadata } from '../lib/metadata'\n\nexport interface GrayscaleOptions {\n  grayscale: '' | 'true'\n}\n\nexport const grayscale: TransformFactory<GrayscaleOptions> = ({ grayscale }) => {\n  if (grayscale !== '' && grayscale !== 'true') return\n\n  return function grayscaleTransform(image) {\n    setMetadata(image, 'grayscale', true)\n\n    return image.grayscale()\n  }\n}\n","import { TransformFactory } from '../types'\nimport { setMetadata } from '../lib/metadata'\n\nexport interface HSBOptions {\n  hue: string\n  saturation: string\n  brightness: string\n}\n\nexport const hsb: TransformFactory<HSBOptions> = (config) => {\n  const hue = config.hue && parseInt(config.hue)\n  const saturation = config.saturation && parseFloat(config.saturation)\n  const brightness = config.brightness && parseFloat(config.brightness)\n\n  if (!hue && !saturation && !brightness) return\n\n  return function hsbTransform(image) {\n    setMetadata(image, 'hue', hue)\n    setMetadata(image, 'saturation', saturation)\n    setMetadata(image, 'brightness', brightness)\n\n    return image.modulate({\n      hue: hue || 0,\n      saturation: saturation || 1,\n      brightness: brightness || 1\n    })\n  }\n}\n","import { TransformFactory } from '../types'\nimport { setMetadata } from '../lib/metadata'\n\nexport interface InvertOptions {\n  invert: '' | 'true'\n}\n\nexport const invert: TransformFactory<InvertOptions> = ({ invert }) => {\n  if (invert !== '' && invert !== 'true') return\n\n  return function invertTransform(image) {\n    setMetadata(image, 'invert', true)\n\n    return image.negate()\n  }\n}\n","import { TransformOption } from '../types'\nimport { setMetadata } from '../lib/metadata'\n\nexport const kernelValues = ['nearest', 'cubic', 'mitchell', 'lanczos2', 'lanczos3'] as const\n\nexport type KernelValue = (typeof kernelValues)[number]\n\nexport interface KernelOptions {\n  kernel: KernelValue\n}\n\nexport const getKernel: TransformOption<KernelOptions, KernelValue> = ({ kernel }, image) => {\n  if (kernel && kernelValues.includes(kernel)) {\n    setMetadata(image, 'kernel', kernel)\n\n    return kernel\n  }\n}\n","import { TransformFactory } from '../types'\nimport { setMetadata } from '../lib/metadata'\n\nexport interface MedianOptions {\n  median: string\n}\n\nexport const median: TransformFactory<MedianOptions> = (config) => {\n  const median = config.median ? parseInt(config.median) : undefined\n\n  if (!median) return\n\n  return function medianTransform(image) {\n    setMetadata(image, 'median', median)\n\n    return image.median(median)\n  }\n}\n","import { TransformFactory } from '../types'\nimport { setMetadata } from '../lib/metadata'\n\nexport interface NormalizeOptions {\n  normalize: '' | 'true'\n}\n\nexport const normalize: TransformFactory<NormalizeOptions> = ({ normalize }) => {\n  if (normalize !== '' && normalize !== 'true') return\n\n  return function normalizeTransform(image) {\n    setMetadata(image, 'normalize', true)\n\n    return image.normalize()\n  }\n}\n","import { TransformOption } from '../types'\nimport { setMetadata } from '../lib/metadata'\n\nexport const positionValues = [\n  'top',\n  'right top',\n  'right',\n  'right bottom',\n  'bottom',\n  'left bottom',\n  'left',\n  'left top',\n  'north',\n  'northeast',\n  'east',\n  'southeast',\n  'south',\n  'southwest',\n  'west',\n  'northwest',\n  'center',\n  'centre',\n  'entropy',\n  'attention'\n] as const\n\nexport const positionShorthands = [\n  'top',\n  'right top',\n  'right',\n  'right bottom',\n  'bottom',\n  'left bottom',\n  'left',\n  'left top'\n]\n\nexport type PositionValue = (typeof positionValues)[number]\n\nexport interface PositionOptions {\n  position: PositionValue\n}\n\nexport const getPosition: TransformOption<PositionOptions, PositionValue> = (config, image) => {\n  let position: PositionValue | undefined = undefined\n\n  if (config.position && positionValues.includes(config.position)) {\n    position = config.position\n  } else {\n    position = Object.keys(config).find(\n      (k: string): k is PositionValue => positionShorthands.includes(k) && config[k] === ''\n    )\n  }\n  if (!position) return\n\n  setMetadata(image, 'position', position)\n\n  return position\n}\n","import { getMetadata, setMetadata } from '../lib/metadata'\nimport { TransformFactory } from '../types'\nimport { getBackground } from './background'\nimport { getFit } from './fit'\nimport { getKernel } from './kernel'\nimport { getPosition } from './position'\n\nexport interface ResizeOptions {\n  width: string\n  w: string\n  height: string\n  h: string\n  aspect: string\n  ar: string\n  withoutEnlargement: '' | 'true'\n  withoutReduction: '' | 'true'\n}\n\n/**\n * This function parses a user provided aspect-ratio string into a float.\n * Valid syntaxes are `16:9` or `1.777`\n * @param aspect\n * @returns\n */\nfunction parseAspect(aspect: string): number | undefined {\n  const parts = aspect.split(':')\n\n  let aspectRatio\n  if (parts.length === 1) {\n    // the string was a float\n    aspectRatio = parseFloat(parts[0])\n  } else if (parts.length === 2) {\n    // the string was a colon delimited aspect ratio\n    const [width, height] = parts.map((str) => parseInt(str))\n\n    if (!width || !height) return undefined\n\n    aspectRatio = width / height\n  }\n  if (!aspectRatio || aspectRatio <= 0) return undefined\n  return aspectRatio\n}\n\nexport const resize: TransformFactory<ResizeOptions> = (config, context) => {\n  const width = parseInt(config.width || config.w || '')\n  const height = parseInt(config.height || config.h || '')\n  const aspect = parseAspect(config.aspect || config.ar || '')\n  const withoutEnlargement = config.withoutEnlargement === '' || config.withoutEnlargement === 'true'\n  const withoutReduction = config.withoutReduction === '' || config.withoutReduction === 'true'\n\n  if (\n    (!width && !height && !aspect) ||\n    (config.withoutEnlargement && !withoutEnlargement) ||\n    (config.withoutReduction && !withoutReduction)\n  )\n    return\n\n  return function resizeTransform(image) {\n    // calculate finalWidth & finalHeight\n    const originalWidth = getMetadata(image, 'width')\n    const originalHeight = getMetadata(image, 'height')\n    const originalAspect = originalWidth / originalHeight\n\n    let finalWidth = width,\n      finalHeight = height,\n      finalAspect = aspect\n\n    if (aspect && !width && !height) {\n      // only aspect was given, need to calculate which dimension to crop\n      if (aspect > originalAspect) {\n        finalHeight = originalWidth / aspect\n        finalWidth = originalWidth\n      } else {\n        finalHeight = originalHeight\n        finalWidth = originalHeight / aspect\n      }\n    } else if (!height) {\n      // only width was provided, need to calculate height\n\n      finalHeight = width / (aspect || originalAspect)\n    } else if (!width) {\n      /* only height was provided, need to calculate width */\n      finalWidth = height * (aspect || originalAspect)\n    }\n\n    if (\n      (withoutEnlargement && (finalHeight > originalHeight || finalWidth > originalWidth)) ||\n      (withoutReduction && (finalHeight < originalHeight || finalWidth < originalWidth))\n    ) {\n      finalHeight = originalHeight\n      finalWidth = originalWidth\n      finalAspect = originalAspect\n\n      context.logger.info(\n        'withoutEnlargement or withoutReduction enabled. Image width, height and aspect ratio reverted to original values'\n      )\n    }\n\n    setMetadata(image, 'height', finalHeight)\n    setMetadata(image, 'width', finalWidth)\n    setMetadata(image, 'aspect', finalAspect)\n    setMetadata(image, 'withoutEnlargement', withoutEnlargement)\n    setMetadata(image, 'withoutReduction', withoutReduction)\n\n    return image.resize({\n      width: Math.round(finalWidth) || undefined,\n      height: Math.round(finalHeight) || undefined,\n      withoutEnlargement: withoutEnlargement,\n      withoutReduction: withoutReduction,\n      fit: getFit(config, image),\n      position: getPosition(config, image),\n      kernel: getKernel(config, image),\n      background: getBackground(config, image)\n    })\n  }\n}\n","import { TransformFactory } from '../types'\nimport { setMetadata } from '../lib/metadata'\nimport { getBackground } from './background'\n\nexport interface RotateOptions {\n  rotate: string\n}\n\nexport const rotate: TransformFactory<RotateOptions> = (config) => {\n  const rotate = config.rotate && parseInt(config.rotate)\n\n  if (!rotate) return\n\n  return function rotateTransform(image) {\n    setMetadata(image, 'rotate', rotate)\n\n    return image.rotate(rotate, {\n      background: getBackground(config, image)\n    })\n  }\n}\n","import { TransformFactory } from '../types'\nimport { setMetadata } from '../lib/metadata'\n\nexport interface TintOptions {\n  tint: string\n}\n\nexport const tint: TransformFactory<TintOptions> = ({ tint }) => {\n  if (typeof tint !== 'string' || !tint.length) return\n\n  return function tintTransform(image) {\n    setMetadata(image, 'tint', '#' + tint)\n\n    return image.tint('#' + tint)\n  }\n}\n","import { blur } from './transforms/blur'\nimport { flatten } from './transforms/flatten'\nimport { flip } from './transforms/flip'\nimport { flop } from './transforms/flop'\nimport { format } from './transforms/format'\nimport { grayscale } from './transforms/grayscale'\nimport { hsb } from './transforms/hsb'\nimport { invert } from './transforms/invert'\nimport { median } from './transforms/median'\nimport { normalize } from './transforms/normalize'\nimport { resize } from './transforms/resize'\nimport { rotate } from './transforms/rotate'\nimport { tint } from './transforms/tint'\n\nexport const builtins = [\n  blur,\n  flatten,\n  flip,\n  flop,\n  format,\n  grayscale,\n  hsb,\n  invert,\n  median,\n  normalize,\n  resize,\n  rotate,\n  tint\n]\n","import type { ImageConfig, OutputFormat, Picture, Source } from './types'\n\nexport const urlFormat: OutputFormat = () => (metadatas) => {\n  const urls: string[] = metadatas.map((metadata) => metadata.src as string)\n\n  return urls.length == 1 ? urls[0] : urls\n}\n\nexport const srcsetFormat: OutputFormat = () => (metadatas) => {\n  const sources = metadatas.map((meta) => `${meta.src} ${meta.width}w`)\n\n  return sources.join(', ')\n}\n\nexport const metadataFormat: OutputFormat = (whitelist) => (metadatas) => {\n  if (whitelist) {\n    metadatas = metadatas.map((cfg) => Object.fromEntries(Object.entries(cfg).filter(([k]) => whitelist.includes(k))))\n  }\n\n  metadatas.forEach((m) => delete m.image)\n\n  return metadatas.length === 1 ? metadatas[0] : metadatas\n}\n\nconst metadataToSource = (m: ImageConfig) => ({ src: m.src, w: m.width } as Source)\n\n/** normalizes the format for use in mime-type */\nconst format = (m: ImageConfig) => (m.format as string).replace('jpg', 'jpeg')\n\nexport const sourceFormat: OutputFormat = () => (metadatas) => {\n  return metadatas.map((m) => metadataToSource(m))\n}\n\n/** fallback format should be specified last */\nexport const pictureFormat: OutputFormat = () => (metadatas) => {\n  const fallbackFormat = [...new Set(metadatas.map((m) => format(m)))].pop()\n\n  let largestFallback\n  let largestFallbackSize = 0\n  let fallbackFormatCount = 0\n  for (let i = 0; i < metadatas.length; i++) {\n    const m = metadatas[i]\n    if (format(m) === fallbackFormat) {\n      fallbackFormatCount++\n      if ((m.width as number) > largestFallbackSize) {\n        largestFallback = m\n        largestFallbackSize = m.width as number\n      }\n    }\n  }\n\n  const sources: Record<string, Source[]> = {}\n  for (let i = 0; i < metadatas.length; i++) {\n    const m = metadatas[i]\n    const f = format(m)\n    // we don't need to create a source tag for the fallback format if there is\n    // only a single image in that format\n    if (f === fallbackFormat && fallbackFormatCount < 2) {\n      continue\n    }\n    if (sources[f]) {\n      sources[f].push(metadataToSource(m))\n    } else {\n      sources[f] = [metadataToSource(m)]\n    }\n  }\n\n  const result: Picture = {\n    sources,\n    // the fallback should be the largest image in the fallback format\n    // we assume users should never upsize an image because that is just wasted\n    // bytes since the browser can upsize just as well\n    fallback: {\n      src: largestFallback?.src as string,\n      w: largestFallback?.width as number,\n      h: largestFallback?.height as number\n    }\n  }\n  return result\n}\n\nexport const builtinOutputFormats = {\n  url: urlFormat,\n  source: sourceFormat,\n  srcset: srcsetFormat,\n  picture: pictureFormat,\n  metadata: metadataFormat,\n  meta: metadataFormat\n}\n","import sharp from 'sharp'\nimport { ImageConfig } from './types'\nimport { createHash } from 'crypto'\n\nexport function loadImage(path: string) {\n  return sharp(path)\n}\n\nexport function generateImageID(url: URL, config: ImageConfig) {\n  const baseURL = url.host ? new URL(url.origin + url.pathname) : new URL(url.protocol + url.pathname)\n\n  return createHash('sha1').update(baseURL.href).update(JSON.stringify(config)).digest('hex')\n}\n","export function parseURL(rawURL: string) {\n  return new URL(rawURL.replace(/#/g, '%23'), 'file://')\n}\n\nexport function extractEntries(searchParams: URLSearchParams) {\n  const entries: Array<[string, string[]]> = []\n\n  for (const [key, value] of searchParams) {\n    entries.push([key, value.split(';')])\n  }\n\n  return entries\n}\n","import { OutputFormat } from '..'\n\n/**\n * This function calculates the cartesian product of two or more arrays and is straight from stackoverflow ;)\n * Should be replaced with something more legible but works for now.\n * @internal\n */\nexport const cartesian = (...a: any[]) =>\n  a.reduce((a: any, b: any) => a.flatMap((d: any) => b.map((e: any) => [d, e].flat())))\n\n/**\n * This function builds up all possible combinations the given entries can be combined\n * an returns it as an array of objects that can be given to a the transforms.\n * @param entries The url parameter entries\n * @returns An array of directive options\n */\nexport function resolveConfigs(\n  entries: Array<[string, string[]]>,\n  outputFormats: Record<string, OutputFormat>\n): Record<string, string | string[]>[] {\n  // create a new array of entries for each argument\n  const singleArgumentEntries = entries\n    .filter(([k]) => !(k in outputFormats))\n    .map(([key, values]) => values.map<[[string, string]]>((v) => [[key, v]]))\n\n  // do a cartesian product on all entries to get all combainations we need to produce\n  const combinations = singleArgumentEntries\n    // .filter(([key]) => !(key[0][0] in outputFormats))\n    .reduce((prev, cur) => (prev.length ? cartesian(prev, cur) : cur), [])\n\n  const metadataAddons = entries.filter(([k]) => k in outputFormats)\n\n  // and return as an array of objects\n  const out: Record<string, string | string[]>[] = combinations.map((options) =>\n    Object.fromEntries([...options, ...metadataAddons])\n  )\n\n  return out.length ? out : [Object.fromEntries(metadataAddons)]\n}\n","import { Logger } from '../types'\n\nexport const consoleLogger: Logger = {\n  info(msg) {\n    console.info(msg)\n  },\n  warn(msg) {\n    console.warn(msg)\n  },\n  error(msg) {\n    console.error(msg)\n  }\n}\n","import { ImageTransformation, ImageConfig, TransformFactory, TransformFactoryContext, Logger } from '../types'\nimport { consoleLogger } from './logger'\n\nexport function generateTransforms(config: ImageConfig, factories: TransformFactory[], logger?: Logger) {\n  if (logger === undefined) {\n    logger = consoleLogger\n  }\n\n  const transforms: ImageTransformation[] = []\n  const parametersUsed = new Set<string>()\n\n  const context: TransformFactoryContext = {\n    useParam: (k) => parametersUsed.add(k),\n    logger\n  }\n\n  for (const directive of factories) {\n    const transform = directive(config, context)\n\n    if (typeof transform === 'function') transforms.push(transform)\n  }\n\n  return {\n    transforms,\n    parametersUsed\n  }\n}\n","import { Sharp } from 'sharp'\nimport { ImageTransformation, TransformResult } from '../types'\nimport { METADATA } from './metadata'\n\nexport async function applyTransforms(\n  transforms: ImageTransformation[],\n  image: Sharp,\n  removeMetadata = true\n): Promise<TransformResult> {\n  image[METADATA] = await image.metadata()\n\n  if (removeMetadata) {\n    // delete the private metadata\n    delete image[METADATA].exif\n    delete image[METADATA].iptc\n    delete image[METADATA].xmp\n    delete image[METADATA].tifftagPhotoshop\n    delete image[METADATA].icc\n  } else {\n    image.withMetadata()\n  }\n\n  for (const transform of transforms) {\n    image = await transform(image)\n  }\n\n  return {\n    image,\n    metadata: image[METADATA]\n  }\n}\n"],"names":["format"],"mappings":"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"}